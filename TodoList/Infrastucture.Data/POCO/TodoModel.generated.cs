//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/linq2db).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------

#pragma warning disable 1591

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;

using LinqToDB;
using LinqToDB.DataProvider.SqlServer;
using LinqToDB.Extensions;
using LinqToDB.Mapping;

namespace ToDoApp.Infrastructure.Linq2DbData.POCO
{
	/// <summary>
	/// Database       : TODO_acceb7bc48244e71acd6588a63d324d6
	/// Data Source    : (LocalDB)\MSSQLLocalDB
	/// Server Version : 13.00.4001
	/// </summary>
	public partial class ToDoBd : LinqToDB.Data.DataConnection
	{
		public ITable<MigrationHistory> MigrationHistories { get { return this.GetTable<MigrationHistory>(); } }
		public ITable<TodoItem>         TodoItems          { get { return this.GetTable<TodoItem>(); } }
		public ITable<User>             Users              { get { return this.GetTable<User>(); } }

		public ToDoBd()
		{
			InitDataContext();
			InitMappingSchema();
		}

		public ToDoBd(string configuration)
			: base(configuration)
		{
			InitDataContext();
			InitMappingSchema();
		}

		partial void InitDataContext  ();
		partial void InitMappingSchema();

		#region FreeTextTable

		public class FreeTextKey<T>
		{
			public T   Key;
			public int Rank;
		}

		private static MethodInfo _freeTextTableMethod1 = typeof(ToDoBd).GetMethod("FreeTextTable", new Type[] { typeof(string), typeof(string) });

		[FreeTextTableExpression]
		public ITable<FreeTextKey<TKey>> FreeTextTable<TTable, TKey>(string field, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				_freeTextTableMethod1,
				field,
				text);
		}

		private static MethodInfo _freeTextTableMethod2 = 
			typeof(ToDoBd).GetMethods()
				.Where(m => m.Name == "FreeTextTable" &&  m.IsGenericMethod && m.GetParameters().Length == 2)
				.Where(m => m.GetParameters()[0].ParameterType.IsGenericTypeEx() && m.GetParameters()[0].ParameterType.GetGenericTypeDefinition() == typeof(Expression<>))
				.Where(m => m.GetParameters()[1].ParameterType == typeof(string))
				.Single();

		[FreeTextTableExpression]
		public ITable<FreeTextKey<TKey>> FreeTextTable<TTable, TKey>(Expression<Func<TTable,string>> fieldSelector, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				_freeTextTableMethod2,
				fieldSelector,
				text);
		}

		#endregion
	}

	[Table(Schema="dbo", Name="__MigrationHistory")]
	public partial class MigrationHistory
	{
		[PrimaryKey(1), NotNull] public string MigrationId    { get; set; } // nvarchar(150)
		[PrimaryKey(2), NotNull] public string ContextKey     { get; set; } // nvarchar(300)
		[Column,        NotNull] public byte[] Model          { get; set; } // varbinary(max)
		[Column,        NotNull] public string ProductVersion { get; set; } // nvarchar(32)
	}

	[Table(Schema="dbo", Name="TodoItems")]
	public partial class TodoItem
	{
		[PrimaryKey, Identity   ] public int    Id          { get; set; } // int
		[Column,        Nullable] public string Name        { get; set; } // nvarchar(max)
		[Column,        Nullable] public string Description { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public int    UserId      { get; set; } // int

		#region Associations

		/// <summary>
		/// FK_dbo.TodoItems_dbo.Users_UserId
		/// </summary>
		[Association(ThisKey="UserId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_dbo.TodoItems_dbo.Users_UserId", BackReferenceName="DboTodoItemsdboUsersUserIds")]
		public User User { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="Users")]
	public partial class User
	{
		[PrimaryKey, Identity] public int    Id       { get; set; } // int
		[Column,     Nullable] public string Login    { get; set; } // nvarchar(max)
		[Column,     Nullable] public string Password { get; set; } // nvarchar(max)

		#region Associations

		/// <summary>
		/// FK_dbo.TodoItems_dbo.Users_UserId_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="UserId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<TodoItem> DboTodoItemsdboUsersUserIds { get; set; }

		#endregion
	}

	public static partial class TableExtensions
	{
		public static MigrationHistory Find(this ITable<MigrationHistory> table, string MigrationId, string ContextKey)
		{
			return table.FirstOrDefault(t =>
				t.MigrationId == MigrationId &&
				t.ContextKey  == ContextKey);
		}

		public static TodoItem Find(this ITable<TodoItem> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static User Find(this ITable<User> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}
	}
}

#pragma warning restore 1591
